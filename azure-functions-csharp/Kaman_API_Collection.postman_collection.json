{
  "info": {
    "name": "Kaman Azure Functions API",
    "description": "Complete API collection for Kaman Gift Card System middleware layer built with Azure Functions (C#)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse response",
                  "const response = pm.response.json();",
                  "",
                  "// Check if login was successful",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag\", function () {",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response contains authentication data\", function () {",
                  "    pm.expect(response.data).to.have.property('authentication');",
                  "    pm.expect(response.data.authentication).to.have.property('accessToken');",
                  "    pm.expect(response.data.authentication).to.have.property('refreshToken');",
                  "});",
                  "",
                  "// Save tokens to environment",
                  "if (response.success && response.data.authentication) {",
                  "    pm.environment.set(\"accessToken\", response.data.authentication.accessToken);",
                  "    pm.environment.set(\"refreshToken\", response.data.authentication.refreshToken);",
                  "    pm.environment.set(\"userId\", response.data.user.userId);",
                  "    pm.environment.set(\"companyId\", response.data.user.companyId);",
                  "    console.log(\"Tokens saved to environment\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticate a user and receive JWT tokens. No authentication required."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse response",
                  "const response = pm.response.json();",
                  "",
                  "// Tests",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag\", function () {",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "// Update tokens",
                  "if (response.success && response.data.authentication) {",
                  "    pm.environment.set(\"accessToken\", response.data.authentication.accessToken);",
                  "    pm.environment.set(\"refreshToken\", response.data.authentication.refreshToken);",
                  "    console.log(\"Tokens refreshed and saved\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Refresh an expired access token using a valid refresh token."
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for login and token refresh"
    },
    {
      "name": "Company Management",
      "item": [
        {
          "name": "Create Company",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse response",
                  "const response = pm.response.json();",
                  "",
                  "// Tests",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag\", function () {",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Company was created\", function () {",
                  "    pm.expect(response.data).to.have.property('company');",
                  "    pm.expect(response.data).to.have.property('wallet');",
                  "    pm.expect(response.data.company).to.have.property('companyId');",
                  "    pm.expect(response.data.wallet).to.have.property('walletId');",
                  "});",
                  "",
                  "// Save company ID for future requests",
                  "if (response.success && response.data.company) {",
                  "    pm.environment.set(\"companyId\", response.data.company.companyId);",
                  "    pm.environment.set(\"companyCode\", response.data.company.companyCode);",
                  "    console.log(\"Company ID saved: \" + response.data.company.companyId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"companyCode\": \"DEMO{{$randomInt}}\",\n  \"name\": \"Demo Corporation {{$randomInt}}\",\n  \"email\": \"admin{{$randomInt}}@democorp.com\",\n  \"phone\": \"+201234567890\",\n  \"country\": \"Egypt\",\n  \"address\": \"123 Business Street, Cairo\",\n  \"defaultCurrency\": \"EGP\",\n  \"minimumBalance\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/company/create",
              "host": ["{{baseUrl}}"],
              "path": ["company", "create"]
            },
            "description": "Create a new company with automatic wallet setup. Requires Super Admin authentication."
          },
          "response": []
        }
      ],
      "description": "Company management endpoints"
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse response",
                  "const response = pm.response.json();",
                  "",
                  "// Tests",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag\", function () {",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"User was created\", function () {",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    pm.expect(response.data).to.have.property('authentication');",
                  "    pm.expect(response.data).to.have.property('credentials');",
                  "    pm.expect(response.data.credentials).to.have.property('defaultPassword');",
                  "});",
                  "",
                  "// Save new user credentials",
                  "if (response.success && response.data.user) {",
                  "    pm.environment.set(\"newUserId\", response.data.user.userId);",
                  "    pm.environment.set(\"newUserEmail\", response.data.user.email);",
                  "    pm.environment.set(\"newUserPassword\", response.data.credentials.defaultPassword);",
                  "    console.log(\"New user created with email: \" + response.data.user.email);",
                  "    console.log(\"Default password: \" + response.data.credentials.defaultPassword);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"companyId\": {{companyId}},\n  \"email\": \"user{{$randomInt}}@company.com\",\n  \"displayName\": \"{{$randomFirstName}} {{$randomLastName}}\",\n  \"roleId\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/user/create",
              "host": ["{{baseUrl}}"],
              "path": ["user", "create"]
            },
            "description": "Create a new company user with default password. Requires Super Admin or Company Admin authentication."
          },
          "response": []
        },
        {
          "name": "Set Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse response",
                  "const response = pm.response.json();",
                  "",
                  "// Tests",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag\", function () {",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Password was updated\", function () {",
                  "    pm.expect(response.data).to.have.property('userId');",
                  "    pm.expect(response.data).to.have.property('email');",
                  "    pm.expect(response.data).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": {{userId}},\n  \"newPassword\": \"NewSecure@Pass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/user/set-password",
              "host": ["{{baseUrl}}"],
              "path": ["user", "set-password"]
            },
            "description": "Set or reset a user's password. Requires authentication. Users can reset their own password, admins can reset passwords for their company users."
          },
          "response": []
        }
      ],
      "description": "User management endpoints"
    },
    {
      "name": "Test Workflows",
      "item": [
        {
          "name": "1. Login as Super Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test(\"Login successful\", () => pm.response.to.have.status(200));",
                  "if (response.success && response.data.authentication) {",
                  "    pm.environment.set(\"accessToken\", response.data.authentication.accessToken);",
                  "    pm.environment.set(\"refreshToken\", response.data.authentication.refreshToken);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"superadmin@kaman.local\",\n  \"password\": \"YourSuperAdminPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Step 1: Login as Super Admin"
          },
          "response": []
        },
        {
          "name": "2. Create New Company",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test(\"Company created\", () => pm.response.to.have.status(201));",
                  "if (response.success && response.data.company) {",
                  "    pm.environment.set(\"companyId\", response.data.company.companyId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"companyCode\": \"TESTCO{{$timestamp}}\",\n  \"name\": \"Test Company {{$timestamp}}\",\n  \"email\": \"test{{$timestamp}}@company.com\",\n  \"phone\": \"+201234567890\",\n  \"country\": \"Egypt\",\n  \"address\": \"Test Address\",\n  \"defaultCurrency\": \"EGP\",\n  \"minimumBalance\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/company/create",
              "host": ["{{baseUrl}}"],
              "path": ["company", "create"]
            },
            "description": "Step 2: Create a new company"
          },
          "response": []
        },
        {
          "name": "3. Create Company User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test(\"User created\", () => pm.response.to.have.status(201));",
                  "if (response.success && response.data.user) {",
                  "    pm.environment.set(\"newUserEmail\", response.data.user.email);",
                  "    pm.environment.set(\"newUserPassword\", response.data.credentials.defaultPassword);",
                  "    pm.environment.set(\"newUserId\", response.data.user.userId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"companyId\": {{companyId}},\n  \"email\": \"admin{{$timestamp}}@testcompany.com\",\n  \"displayName\": \"Test Admin\",\n  \"roleId\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/user/create",
              "host": ["{{baseUrl}}"],
              "path": ["user", "create"]
            },
            "description": "Step 3: Create a user for the company"
          },
          "response": []
        },
        {
          "name": "4. Login as New User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test(\"Login successful\", () => pm.response.to.have.status(200));",
                  "if (response.success && response.data.authentication) {",
                  "    pm.environment.set(\"userAccessToken\", response.data.authentication.accessToken);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Step 4: Login as the newly created user with default password"
          },
          "response": []
        },
        {
          "name": "5. Change User Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test(\"Password changed\", () => pm.response.to.have.status(200));",
                  "pm.environment.set(\"newUserPassword\", \"MyNewSecure@Pass123\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": {{newUserId}},\n  \"newPassword\": \"MyNewSecure@Pass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/user/set-password",
              "host": ["{{baseUrl}}"],
              "path": ["user", "set-password"]
            },
            "description": "Step 5: Change the user's password from default to new password"
          },
          "response": []
        },
        {
          "name": "6. Login with New Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "pm.test(\"Login with new password successful\", () => pm.response.to.have.status(200));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"{{newUserPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Step 6: Verify login works with the new password"
          },
          "response": []
        }
      ],
      "description": "Complete workflow testing from company creation to user login"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script runs before each request",
          "console.log('Request URL:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script runs after each request",
          "console.log('Response Status:', pm.response.code);",
          "console.log('Response Time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:7071/api",
      "type": "string"
    }
  ]
}
